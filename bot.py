import os
import time
import json
import asyncio
import aiosqlite
from uuid import uuid4
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile,
)

import qrcode

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '8156945280:AAH8OzlppYm9T12vaqHIIiqEjGgO8Fui3ss'
XUI_DB_PATH = "/etc/x-ui/x-ui.db"
VLESS_ADDRESS = "217.145.79.217"
VLESS_PORT = 44301
VLESS_PATH = ""
VLESS_SECURITY = "none"
VLESS_TRANSPORT = "tcp"
VLESS_TAG = "master"

# === TELEGRAM ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –í–†–ï–ú–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥—ë—Ç email) ===
pending_email_users = {}

# === –ö–ù–û–ü–ö–ò ===
def main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîê –ü–æ–ª—É—á–∏—Ç—å VPN", callback_data="getvpn")],
            [InlineKeyboardButton(text="üö´ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="revoke")]
        ]
    )

def ask_email_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìß –£–∫–∞–∑–∞—Ç—å –ø–æ—á—Ç—É", callback_data="enter_email")],
            [InlineKeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")]
        ]
    )

def cancel_email_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_email")]
        ]
    )

# === QR-–ö–û–î ===
def generate_qr_code(link: str) -> BytesIO:
    img = qrcode.make(link)
    bio = BytesIO()
    bio.name = "vpn_qr.png"
    img.save(bio, "PNG")
    bio.seek(0)
    return bio

# === /start ===
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN-–¥–æ—Å—Ç—É–ø:", reply_markup=main_menu())

# === –ö–ù–û–ü–ö–ê: üîê –ü–æ–ª—É—á–∏—Ç—å VPN ===
@dp.callback_query(F.data == "getvpn")
async def handle_getvpn(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å email?\nüìß –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –±—É–¥—É—â–µ–º.\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å email –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=ask_email_keyboard()
    )

# === –ö–ù–û–ü–ö–ê: üö´ –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø ===
@dp.callback_query(F.data == "revoke")
async def handle_revoke(callback: types.CallbackQuery):
    await callback.answer()
    tg_id = str(callback.from_user.id)

    try:
        async with aiosqlite.connect(XUI_DB_PATH) as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT id, settings FROM inbounds LIMIT 1")
                row = await cursor.fetchone()
                if not row:
                    await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–±–∞—É–Ω–¥ –≤ –±–∞–∑–µ x-ui.")
                    return

                inbound_id, settings_json = row
                settings = json.loads(settings_json)
                original_len = len(settings.get("clients", []))
                settings["clients"] = [c for c in settings["clients"] if c.get("tgId") != tg_id]

                if len(settings["clients"]) == original_len:
                    await callback.message.answer("‚ÑπÔ∏è –£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN-–¥–æ—Å—Ç—É–ø–∞.")
                    return

                await cursor.execute(
                    "UPDATE inbounds SET settings = ? WHERE id = ?",
                    (json.dumps(settings), inbound_id),
                )
                await conn.commit()
                await callback.message.answer("‚úÖ –¢–≤–æ–π VPN-–¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ revoke: {e}")


# === –ö–ù–û–ü–ö–ê: üìß –£–∫–∞–∑–∞—Ç—å –ø–æ—á—Ç—É ===
@dp.callback_query(F.data == "enter_email")
async def handle_enter_email(callback: types.CallbackQuery):
    pending_email_users[callback.from_user.id] = "waiting_email"
    await callback.answer()
    await callback.message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:",
        reply_markup=cancel_email_keyboard()
    )

# === –ö–ù–û–ü–ö–ê: üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ===
@dp.callback_query(F.data == "skip_email")
async def handle_skip_email(callback: types.CallbackQuery):
    await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await generate_vpn(callback.message, email="")

# === –ö–ù–û–ü–ö–ê: ‚ùå –û—Ç–º–µ–Ω–∞ ===
@dp.callback_query(F.data == "cancel_email")
async def handle_cancel_email(callback: types.CallbackQuery):
    pending_email_users.pop(callback.from_user.id, None)
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await generate_vpn(callback.message, email="")

# === –í–≤–æ–¥ email (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ===
@dp.message()
async def handle_possible_email(message: Message):
    user_id = message.from_user.id
    if pending_email_users.get(user_id) == "waiting_email":
        pending_email_users.pop(user_id)
        email = message.text.strip()
        await generate_vpn(message, email=email)


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞ ===
async def generate_vpn(message: Message, email: str = ""):
    tg_id = str(message.from_user.id)
    client_tag = f"tg_{tg_id}"

    try:
        async with aiosqlite.connect(XUI_DB_PATH) as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT id, settings FROM inbounds LIMIT 1")
                row = await cursor.fetchone()
                if not row:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–±–∞—É–Ω–¥ –≤ –±–∞–∑–µ x-ui.")
                    return

                inbound_id, settings_json = row
                settings = json.loads(settings_json)
                clients = settings.get("clients", [])

                existing = next((c for c in clients if c.get("tgId") == tg_id), None)

                if existing:
                    uuid = existing["id"]
                else:
                    uuid = str(uuid4())
                    expiry = int((time.time() + 365 * 24 * 60 * 60) * 1000)  # 1 –≥–æ–¥
                    new_client = {
                        "id": uuid,
                        "email": email,
                        "enable": True,
                        "expiryTime": expiry,
                        "limitIp": 0,
                        "reset": 0,
                        "totalGB": 0,
                        "subId": "",
                        "tgId": tg_id,
                        "flow": "",
                        "comment": "",
                    }

                    clients.append(new_client)
                    settings["clients"] = clients
                    await cursor.execute(
                        "UPDATE inbounds SET settings = ? WHERE id = ?",
                        (json.dumps(settings), inbound_id),
                    )
                    await conn.commit()
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º x-ui (—á—Ç–æ–±—ã xray –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    process = await asyncio.create_subprocess_exec("x-ui", "restart")
                    await process.wait()

            # –°–±–æ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
            config_url = (
                f"vless://{uuid}@{VLESS_ADDRESS}:{VLESS_PORT}?type={VLESS_TRANSPORT}"
                f"&path={VLESS_PATH}&security={VLESS_SECURITY}#{VLESS_TAG}-{client_tag}"
            )
            await message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ <b>1 –≥–æ–¥</b>.\n\n"
                f"üì≤ –°–∫–æ–ø–∏—Ä—É–π —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>Amnezia</b>:\n"
                f"<code>{config_url}</code>"
            )

            qr = generate_qr_code(config_url)
            await message.answer_photo(
                photo=BufferedInputFile(qr.read(), filename="vpn_qr.png"),
                caption="üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            )

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π x-ui.")
        print(f"–û—à–∏–±–∫–∞: {e}")
# === –ó–ê–ü–£–°–ö ===

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
